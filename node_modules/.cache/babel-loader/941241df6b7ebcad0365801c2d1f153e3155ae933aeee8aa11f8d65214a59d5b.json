{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport classNames from 'classnames';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ConfigContext } from '../config-provider';\nimport DefaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport { FormItemInputContext } from '../form/context';\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport defaultLocale from '../locale/en_US';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport { groupKeysMap, groupDisabledKeysMap } from '../_util/transKeys';\nimport warning from '../_util/warning';\nimport List from './list';\nimport Operation from './operation';\nimport Search from './search';\nimport useStyle from './style';\nconst TransferFC = props => {\n  const {\n    prefixCls,\n    className,\n    style,\n    children\n  } = props;\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(className, hashId),\n    style: style\n  }, children));\n};\nconst Transfer = props => {\n  const {\n    dataSource = [],\n    targetKeys = [],\n    selectedKeys = [],\n    selectAllLabels = [],\n    operations = [],\n    style = {},\n    listStyle = {},\n    locale = {},\n    titles,\n    className,\n    disabled,\n    showSearch = false,\n    operationStyle,\n    showSelectAll,\n    oneWay,\n    pagination,\n    status: customStatus,\n    prefixCls: customizePrefixCls,\n    filterOption,\n    render,\n    footer,\n    children,\n    rowKey,\n    onScroll,\n    onChange,\n    onSearch,\n    onSelectChange\n  } = props;\n  const [sourceSelectedKeys, setSourceSelectedKeys] = useState(() => selectedKeys.filter(key => !targetKeys.includes(key)));\n  const [targetSelectedKeys, setTargetSelectedKeys] = useState(() => selectedKeys.filter(key => targetKeys.includes(key)));\n  useEffect(() => {\n    if (props.selectedKeys) {\n      setSourceSelectedKeys(() => selectedKeys.filter(key => !targetKeys.includes(key)));\n      setTargetSelectedKeys(() => selectedKeys.filter(key => targetKeys.includes(key)));\n    }\n  }, [props.selectedKeys, props.targetKeys]);\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!pagination || !children, 'Transfer', '`pagination` not support customize render list.') : void 0;\n  }\n  const setStateKeys = useCallback((direction, keys) => {\n    if (direction === 'left') {\n      setSourceSelectedKeys(prev => typeof keys === 'function' ? keys(prev || []) : keys);\n    } else {\n      setTargetSelectedKeys(prev => typeof keys === 'function' ? keys(prev || []) : keys);\n    }\n  }, [sourceSelectedKeys, targetSelectedKeys]);\n  const handleSelectChange = useCallback((direction, holder) => {\n    if (direction === 'left') {\n      onSelectChange === null || onSelectChange === void 0 ? void 0 : onSelectChange(holder, targetSelectedKeys);\n    } else {\n      onSelectChange === null || onSelectChange === void 0 ? void 0 : onSelectChange(sourceSelectedKeys, holder);\n    }\n  }, [sourceSelectedKeys, targetSelectedKeys]);\n  const getTitles = transferLocale => {\n    var _a;\n    return (_a = titles !== null && titles !== void 0 ? titles : transferLocale.titles) !== null && _a !== void 0 ? _a : [];\n  };\n  const handleLeftScroll = e => {\n    onScroll === null || onScroll === void 0 ? void 0 : onScroll('left', e);\n  };\n  const handleRightScroll = e => {\n    onScroll === null || onScroll === void 0 ? void 0 : onScroll('right', e);\n  };\n  const moveTo = direction => {\n    const moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys;\n    const dataSourceDisabledKeysMap = groupDisabledKeysMap(dataSource);\n    // filter the disabled options\n    const newMoveKeys = moveKeys.filter(key => !dataSourceDisabledKeysMap.has(key));\n    const newMoveKeysMap = groupKeysMap(newMoveKeys);\n    // move items to target box\n    const newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(targetKey => !newMoveKeysMap.has(targetKey));\n    // empty checked keys\n    const oppositeDirection = direction === 'right' ? 'left' : 'right';\n    setStateKeys(oppositeDirection, []);\n    handleSelectChange(oppositeDirection, []);\n    onChange === null || onChange === void 0 ? void 0 : onChange(newTargetKeys, direction, newMoveKeys);\n  };\n  const moveToLeft = () => {\n    moveTo('left');\n  };\n  const moveToRight = () => {\n    moveTo('right');\n  };\n  const onItemSelectAll = (direction, keys, checkAll) => {\n    setStateKeys(direction, prevKeys => {\n      let mergedCheckedKeys = [];\n      if (checkAll) {\n        // Merge current keys with origin key\n        mergedCheckedKeys = Array.from(new Set([].concat(_toConsumableArray(prevKeys), _toConsumableArray(keys))));\n      } else {\n        const selectedKeysMap = groupKeysMap(keys);\n        // Remove current keys from origin keys\n        mergedCheckedKeys = prevKeys.filter(key => !selectedKeysMap.has(key));\n      }\n      handleSelectChange(direction, mergedCheckedKeys);\n      return mergedCheckedKeys;\n    });\n  };\n  const onLeftItemSelectAll = (keys, checkAll) => {\n    onItemSelectAll('left', keys, checkAll);\n  };\n  const onRightItemSelectAll = (keys, checkAll) => {\n    onItemSelectAll('right', keys, checkAll);\n  };\n  const leftFilter = e => onSearch === null || onSearch === void 0 ? void 0 : onSearch('left', e.target.value);\n  const rightFilter = e => onSearch === null || onSearch === void 0 ? void 0 : onSearch('right', e.target.value);\n  const handleLeftClear = () => onSearch === null || onSearch === void 0 ? void 0 : onSearch('left', '');\n  const handleRightClear = () => onSearch === null || onSearch === void 0 ? void 0 : onSearch('right', '');\n  const onItemSelect = (direction, selectedKey, checked) => {\n    const holder = _toConsumableArray(direction === 'left' ? sourceSelectedKeys : targetSelectedKeys);\n    const index = holder.indexOf(selectedKey);\n    if (index > -1) {\n      holder.splice(index, 1);\n    }\n    if (checked) {\n      holder.push(selectedKey);\n    }\n    handleSelectChange(direction, holder);\n    if (!props.selectedKeys) {\n      setStateKeys(direction, holder);\n    }\n  };\n  const onLeftItemSelect = (selectedKey, checked) => {\n    onItemSelect('left', selectedKey, checked);\n  };\n  const onRightItemSelect = (selectedKey, checked) => {\n    onItemSelect('right', selectedKey, checked);\n  };\n  const onRightItemRemove = keys => {\n    setStateKeys('right', []);\n    onChange === null || onChange === void 0 ? void 0 : onChange(targetKeys.filter(key => !keys.includes(key)), 'left', _toConsumableArray(keys));\n  };\n  const handleListStyle = direction => {\n    if (typeof listStyle === 'function') {\n      return listStyle({\n        direction\n      });\n    }\n    return listStyle || {};\n  };\n  const [leftDataSource, rightDataSource] = useMemo(() => {\n    const leftData = [];\n    const rightData = new Array(targetKeys.length);\n    const targetKeysMap = groupKeysMap(targetKeys);\n    dataSource.forEach(record => {\n      if (rowKey) {\n        record = Object.assign(Object.assign({}, record), {\n          key: rowKey(record)\n        });\n      }\n      // rightData should be ordered by targetKeys\n      // leftData should be ordered by dataSource\n      if (targetKeysMap.has(record.key)) {\n        rightData[targetKeysMap.get(record.key)] = record;\n      } else {\n        leftData.push(record);\n      }\n    });\n    return [leftData, rightData];\n  }, [dataSource, targetKeys, rowKey]);\n  const configContext = useContext(ConfigContext);\n  const formItemContext = useContext(FormItemInputContext);\n  const {\n    getPrefixCls,\n    renderEmpty,\n    direction\n  } = configContext;\n  const {\n    hasFeedback,\n    status\n  } = formItemContext;\n  const getLocale = transferLocale => Object.assign(Object.assign(Object.assign({}, transferLocale), {\n    notFoundContent: (renderEmpty === null || renderEmpty === void 0 ? void 0 : renderEmpty('Transfer')) || /*#__PURE__*/React.createElement(DefaultRenderEmpty, {\n      componentName: \"Transfer\"\n    })\n  }), locale);\n  const prefixCls = getPrefixCls('transfer', customizePrefixCls);\n  const mergedStatus = getMergedStatus(status, customStatus);\n  const mergedPagination = !children && pagination;\n  const leftActive = targetSelectedKeys.length > 0;\n  const rightActive = sourceSelectedKeys.length > 0;\n  const cls = classNames(prefixCls, {\n    [`${prefixCls}-disabled`]: disabled,\n    [`${prefixCls}-customize-list`]: !!children,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className);\n  return /*#__PURE__*/React.createElement(LocaleReceiver, {\n    componentName: \"Transfer\",\n    defaultLocale: defaultLocale.Transfer\n  }, contextLocale => {\n    const listLocale = getLocale(contextLocale);\n    const [leftTitle, rightTitle] = getTitles(listLocale);\n    return /*#__PURE__*/React.createElement(TransferFC, {\n      prefixCls: prefixCls,\n      className: cls,\n      style: style\n    }, /*#__PURE__*/React.createElement(List, Object.assign({\n      prefixCls: `${prefixCls}-list`,\n      titleText: leftTitle,\n      dataSource: leftDataSource,\n      filterOption: filterOption,\n      style: handleListStyle('left'),\n      checkedKeys: sourceSelectedKeys,\n      handleFilter: leftFilter,\n      handleClear: handleLeftClear,\n      onItemSelect: onLeftItemSelect,\n      onItemSelectAll: onLeftItemSelectAll,\n      render: render,\n      showSearch: showSearch,\n      renderList: children,\n      footer: footer,\n      onScroll: handleLeftScroll,\n      disabled: disabled,\n      direction: direction === 'rtl' ? 'right' : 'left',\n      showSelectAll: showSelectAll,\n      selectAllLabel: selectAllLabels[0],\n      pagination: mergedPagination\n    }, listLocale)), /*#__PURE__*/React.createElement(Operation, {\n      className: `${prefixCls}-operation`,\n      rightActive: rightActive,\n      rightArrowText: operations[0],\n      moveToRight: moveToRight,\n      leftActive: leftActive,\n      leftArrowText: operations[1],\n      moveToLeft: moveToLeft,\n      style: operationStyle,\n      disabled: disabled,\n      direction: direction,\n      oneWay: oneWay\n    }), /*#__PURE__*/React.createElement(List, Object.assign({\n      prefixCls: `${prefixCls}-list`,\n      titleText: rightTitle,\n      dataSource: rightDataSource,\n      filterOption: filterOption,\n      style: handleListStyle('right'),\n      checkedKeys: targetSelectedKeys,\n      handleFilter: rightFilter,\n      handleClear: handleRightClear,\n      onItemSelect: onRightItemSelect,\n      onItemSelectAll: onRightItemSelectAll,\n      onItemRemove: onRightItemRemove,\n      render: render,\n      showSearch: showSearch,\n      renderList: children,\n      footer: footer,\n      onScroll: handleRightScroll,\n      disabled: disabled,\n      direction: direction === 'rtl' ? 'left' : 'right',\n      showSelectAll: showSelectAll,\n      selectAllLabel: selectAllLabels[1],\n      showRemove: oneWay,\n      pagination: mergedPagination\n    }, listLocale)));\n  });\n};\nif (process.env.NODE_ENV !== 'production') {\n  Transfer.displayName = 'Transfer';\n}\nTransfer.List = List;\nTransfer.Search = Search;\nTransfer.Operation = Operation;\nexport default Transfer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}