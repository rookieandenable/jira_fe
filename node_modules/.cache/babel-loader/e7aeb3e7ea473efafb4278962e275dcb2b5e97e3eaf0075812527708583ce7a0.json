{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext } from 'react';\nimport RCTour from '@rc-component/tour';\nimport classNames from 'classnames';\nimport panelRender from './panelRender';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport PurePanel from './PurePanel';\nconst Tour = props => {\n  const {\n      prefixCls: customizePrefixCls,\n      steps,\n      current,\n      type,\n      rootClassName\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"steps\", \"current\", \"type\", \"rootClassName\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = useContext(ConfigContext);\n  const prefixCls = getPrefixCls('tour', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const customClassName = classNames({\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, hashId, rootClassName);\n  const mergedRenderPanel = (stepProps, stepCurrent) => panelRender(stepProps, stepCurrent, type);\n  return wrapSSR( /*#__PURE__*/React.createElement(RCTour, Object.assign({}, restProps, {\n    rootClassName: customClassName,\n    prefixCls: prefixCls,\n    steps: steps,\n    current: current,\n    animated: true,\n    renderPanel: mergedRenderPanel\n  })));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Tour.displayName = 'Tour';\n}\nTour._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default Tour;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}