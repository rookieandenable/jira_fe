{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport Button from '../button';\nimport defaultLocale from '../locale/en_US';\nconst panelRender = (props, current, type) => {\n  const {\n    prefixCls,\n    total = 1,\n    title,\n    onClose,\n    onPrev,\n    onNext,\n    onFinish,\n    cover,\n    description,\n    nextButtonProps,\n    prevButtonProps,\n    stepRender,\n    type: stepType,\n    arrow,\n    className\n  } = props;\n  const mergedType = typeof stepType !== 'undefined' ? stepType : type;\n  const isLastStep = current === total - 1;\n  const prevBtnClick = () => {\n    onPrev === null || onPrev === void 0 ? void 0 : onPrev();\n    if (typeof (prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.onClick) === 'function') {\n      prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.onClick();\n    }\n  };\n  const nextBtnClick = () => {\n    if (isLastStep) {\n      onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n    } else {\n      onNext === null || onNext === void 0 ? void 0 : onNext();\n    }\n    if (typeof (nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.onClick) === 'function') {\n      nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.onClick();\n    }\n  };\n  let headerNode;\n  if (title) {\n    headerNode = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-header`\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-title`\n    }, title));\n  }\n  let descriptionNode;\n  if (description) {\n    descriptionNode = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-description`\n    }, description);\n  }\n  let coverNode;\n  if (cover) {\n    coverNode = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-cover`\n    }, cover);\n  }\n  const mergedSlickNode = typeof stepRender === 'function' && stepRender(current, total) || _toConsumableArray(Array.from({\n    length: total\n  }).keys()).map((stepItem, index) => /*#__PURE__*/React.createElement(\"span\", {\n    key: stepItem,\n    className: classNames(index === current && `${prefixCls}-slider-active`, `${prefixCls}-slider`)\n  }));\n  const slickNode = total > 1 ? mergedSlickNode : null;\n  const mainBtnType = mergedType === 'primary' ? 'default' : 'primary';\n  const secondaryBtnProps = {\n    type: 'default',\n    ghost: mergedType === 'primary'\n  };\n  return /*#__PURE__*/React.createElement(LocaleReceiver, {\n    componentName: \"Tour\",\n    defaultLocale: defaultLocale.Tour\n  }, contextLocale => {\n    var _a, _b;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(mergedType === 'primary' ? `${prefixCls}-primary` : '', className, `${prefixCls}-content`)\n    }, arrow && /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-arrow`,\n      key: \"arrow\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-inner`\n    }, /*#__PURE__*/React.createElement(CloseOutlined, {\n      className: `${prefixCls}-close`,\n      onClick: onClose\n    }), coverNode, headerNode, descriptionNode, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-footer`\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-sliders`\n    }, slickNode), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-buttons`\n    }, current !== 0 ? /*#__PURE__*/React.createElement(Button, Object.assign({}, secondaryBtnProps, prevButtonProps, {\n      onClick: prevBtnClick,\n      size: \"small\",\n      className: classNames(`${prefixCls}-prev-btn`, prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.className)\n    }), (_a = prevButtonProps === null || prevButtonProps === void 0 ? void 0 : prevButtonProps.children) !== null && _a !== void 0 ? _a : contextLocale.Previous) : null, /*#__PURE__*/React.createElement(Button, Object.assign({\n      type: mainBtnType\n    }, nextButtonProps, {\n      onClick: nextBtnClick,\n      size: \"small\",\n      className: classNames(`${prefixCls}-next-btn`, nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.className)\n    }), (_b = nextButtonProps === null || nextButtonProps === void 0 ? void 0 : nextButtonProps.children) !== null && _b !== void 0 ? _b : isLastStep ? contextLocale.Finish : contextLocale.Next)))));\n  });\n};\nexport default panelRender;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}