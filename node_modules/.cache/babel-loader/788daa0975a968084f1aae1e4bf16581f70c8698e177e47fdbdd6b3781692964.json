{"ast":null,"code":"import { genActiveStyle, genBasicInputStyle, genDisabledStyle, genHoverStyle, genInputGroupStyle, genPlaceholderStyle, genStatusStyle, initInputToken } from '../../input/style';\nimport { genComponentStyleHook } from '../../theme/internal';\nimport { resetComponent, resetIcon } from '../../style';\nimport { genCompactItemStyle } from '../../style/compact-item';\nconst genInputNumberStyles = token => {\n  const {\n    componentCls,\n    lineWidth,\n    lineType,\n    colorBorder,\n    borderRadius,\n    fontSizeLG,\n    controlHeightLG,\n    controlHeightSM,\n    colorError,\n    inputPaddingHorizontalSM,\n    colorTextDescription,\n    motionDurationMid,\n    colorPrimary,\n    controlHeight,\n    inputPaddingHorizontal,\n    colorBgContainer,\n    colorTextDisabled,\n    borderRadiusSM,\n    borderRadiusLG,\n    controlWidth,\n    handleVisible\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), genBasicInputStyle(token)), genStatusStyle(token, componentCls)), {\n      display: 'inline-block',\n      width: controlWidth,\n      margin: 0,\n      padding: 0,\n      border: `${lineWidth}px ${lineType} ${colorBorder}`,\n      borderRadius,\n      '&-rtl': {\n        direction: 'rtl',\n        [`${componentCls}-input`]: {\n          direction: 'rtl'\n        }\n      },\n      '&-lg': {\n        padding: 0,\n        fontSize: fontSizeLG,\n        borderRadius: borderRadiusLG,\n        [`input${componentCls}-input`]: {\n          height: controlHeightLG - 2 * lineWidth\n        }\n      },\n      '&-sm': {\n        padding: 0,\n        borderRadius: borderRadiusSM,\n        [`input${componentCls}-input`]: {\n          height: controlHeightSM - 2 * lineWidth,\n          padding: `0 ${inputPaddingHorizontalSM}px`\n        }\n      },\n      '&:hover': Object.assign({}, genHoverStyle(token)),\n      '&-focused': Object.assign({}, genActiveStyle(token)),\n      '&-disabled': Object.assign(Object.assign({}, genDisabledStyle(token)), {\n        [`${componentCls}-input`]: {\n          cursor: 'not-allowed'\n        }\n      }),\n      // ===================== Out Of Range =====================\n      '&-out-of-range': {\n        input: {\n          color: colorError\n        }\n      },\n      // Style for input-group: input with label, with button or dropdown...\n      '&-group': Object.assign(Object.assign(Object.assign({}, resetComponent(token)), genInputGroupStyle(token)), {\n        '&-wrapper': {\n          display: 'inline-block',\n          textAlign: 'start',\n          verticalAlign: 'top',\n          [`${componentCls}-affix-wrapper`]: {\n            width: '100%'\n          },\n          // Size\n          '&-lg': {\n            [`${componentCls}-group-addon`]: {\n              borderRadius: borderRadiusLG\n            }\n          },\n          '&-sm': {\n            [`${componentCls}-group-addon`]: {\n              borderRadius: borderRadiusSM\n            }\n          }\n        }\n      }),\n      [componentCls]: {\n        '&-input': Object.assign(Object.assign({\n          width: '100%',\n          height: controlHeight - 2 * lineWidth,\n          padding: `0 ${inputPaddingHorizontal}px`,\n          textAlign: 'start',\n          backgroundColor: 'transparent',\n          border: 0,\n          borderRadius,\n          outline: 0,\n          transition: `all ${motionDurationMid} linear`,\n          appearance: 'textfield',\n          color: token.colorText,\n          fontSize: 'inherit',\n          verticalAlign: 'top'\n        }, genPlaceholderStyle(token.colorTextPlaceholder)), {\n          '&[type=\"number\"]::-webkit-inner-spin-button, &[type=\"number\"]::-webkit-outer-spin-button': {\n            margin: 0,\n            /* stylelint-disable-next-line property-no-vendor-prefix */\n            webkitAppearance: 'none',\n            appearance: 'none'\n          }\n        })\n      }\n    })\n  },\n  // Handler\n  {\n    [componentCls]: {\n      [`&:hover ${componentCls}-handler-wrap, &-focused ${componentCls}-handler-wrap`]: {\n        opacity: 1\n      },\n      [`${componentCls}-handler-wrap`]: {\n        position: 'absolute',\n        insetBlockStart: 0,\n        insetInlineEnd: 0,\n        width: token.handleWidth,\n        height: '100%',\n        background: colorBgContainer,\n        borderStartStartRadius: 0,\n        borderStartEndRadius: borderRadius,\n        borderEndEndRadius: borderRadius,\n        borderEndStartRadius: 0,\n        opacity: handleVisible === true ? 1 : 0,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'stretch',\n        transition: `opacity ${motionDurationMid} linear ${motionDurationMid}`,\n        // Fix input number inside Menu makes icon too large\n        // We arise the selector priority by nest selector here\n        // https://github.com/ant-design/ant-design/issues/14367\n        [`${componentCls}-handler`]: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flex: 'auto',\n          height: '40%',\n          [`\n              ${componentCls}-handler-up-inner,\n              ${componentCls}-handler-down-inner\n            `]: {\n            marginInlineEnd: 0,\n            fontSize: token.handleFontSize\n          }\n        }\n      },\n      [`${componentCls}-handler`]: {\n        height: '50%',\n        overflow: 'hidden',\n        color: colorTextDescription,\n        fontWeight: 'bold',\n        lineHeight: 0,\n        textAlign: 'center',\n        cursor: 'pointer',\n        borderInlineStart: `${lineWidth}px ${lineType} ${colorBorder}`,\n        transition: `all ${motionDurationMid} linear`,\n        '&:active': {\n          background: token.colorFillAlter\n        },\n        // Hover\n        '&:hover': {\n          height: `60%`,\n          [`\n              ${componentCls}-handler-up-inner,\n              ${componentCls}-handler-down-inner\n            `]: {\n            color: colorPrimary\n          }\n        },\n        '&-up-inner, &-down-inner': Object.assign(Object.assign({}, resetIcon()), {\n          color: colorTextDescription,\n          transition: `all ${motionDurationMid} linear`,\n          userSelect: 'none'\n        })\n      },\n      [`${componentCls}-handler-up`]: {\n        borderStartEndRadius: borderRadius\n      },\n      [`${componentCls}-handler-down`]: {\n        borderBlockStart: `${lineWidth}px ${lineType} ${colorBorder}`,\n        borderEndEndRadius: borderRadius\n      },\n      // Disabled\n      '&-disabled, &-readonly': {\n        [`${componentCls}-handler-wrap`]: {\n          display: 'none'\n        }\n      },\n      [`\n          ${componentCls}-handler-up-disabled,\n          ${componentCls}-handler-down-disabled\n        `]: {\n        cursor: 'not-allowed'\n      },\n      [`\n          ${componentCls}-handler-up-disabled:hover &-handler-up-inner,\n          ${componentCls}-handler-down-disabled:hover &-handler-down-inner\n        `]: {\n        color: colorTextDisabled\n      }\n    }\n  },\n  // Border-less\n  {\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent',\n      boxShadow: 'none',\n      [`${componentCls}-handler-down`]: {\n        borderBlockStartWidth: 0\n      }\n    }\n  }];\n};\nconst genAffixWrapperStyles = token => {\n  const {\n    componentCls,\n    inputPaddingHorizontal,\n    inputAffixPadding,\n    controlWidth,\n    borderRadiusLG,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${componentCls}-affix-wrapper`]: Object.assign(Object.assign(Object.assign({}, genBasicInputStyle(token)), genStatusStyle(token, `${componentCls}-affix-wrapper`)), {\n      // or number handler will cover form status\n      position: 'relative',\n      display: 'inline-flex',\n      width: controlWidth,\n      padding: 0,\n      paddingInlineStart: inputPaddingHorizontal,\n      '&-lg': {\n        borderRadius: borderRadiusLG\n      },\n      '&-sm': {\n        borderRadius: borderRadiusSM\n      },\n      [`&:not(${componentCls}-affix-wrapper-disabled):hover`]: Object.assign(Object.assign({}, genHoverStyle(token)), {\n        zIndex: 1\n      }),\n      '&-focused, &:focus': {\n        zIndex: 1\n      },\n      '&-disabled': {\n        [`${componentCls}[disabled]`]: {\n          background: 'transparent'\n        }\n      },\n      [`> div${componentCls}`]: {\n        width: '100%',\n        border: 'none',\n        outline: 'none',\n        [`&${componentCls}-focused`]: {\n          boxShadow: 'none !important'\n        }\n      },\n      [`input${componentCls}-input`]: {\n        padding: 0\n      },\n      '&::before': {\n        width: 0,\n        visibility: 'hidden',\n        content: '\"\\\\a0\"'\n      },\n      [`${componentCls}-handler-wrap`]: {\n        zIndex: 2\n      },\n      [componentCls]: {\n        '&-prefix, &-suffix': {\n          display: 'flex',\n          flex: 'none',\n          alignItems: 'center',\n          pointerEvents: 'none'\n        },\n        '&-prefix': {\n          marginInlineEnd: inputAffixPadding\n        },\n        '&-suffix': {\n          position: 'absolute',\n          insetBlockStart: 0,\n          insetInlineEnd: 0,\n          zIndex: 1,\n          height: '100%',\n          marginInlineEnd: inputPaddingHorizontal,\n          marginInlineStart: inputAffixPadding\n        }\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('InputNumber', token => {\n  const inputNumberToken = initInputToken(token);\n  return [genInputNumberStyles(inputNumberToken), genAffixWrapperStyles(inputNumberToken),\n  // =====================================================\n  // ==             Space Compact                       ==\n  // =====================================================\n  genCompactItemStyle(inputNumberToken)];\n}, token => ({\n  controlWidth: 90,\n  handleWidth: token.controlHeightSM - token.lineWidth * 2,\n  handleFontSize: token.fontSize / 2,\n  handleVisible: 'auto'\n}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}