{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport * as React from 'react';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Dropdown from '../dropdown/dropdown';\nconst BreadcrumbItem = props => {\n  const {\n      prefixCls: customizePrefixCls,\n      separator = '/',\n      children,\n      menu,\n      overlay,\n      dropdownProps\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"separator\", \"children\", \"menu\", \"overlay\", \"dropdownProps\"]);\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);\n  // Warning for deprecated usage\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('overlay' in props), 'Breadcrumb.Item', '`overlay` is deprecated. Please use `menu` instead.') : void 0;\n  }\n  /** If overlay is have Wrap a Dropdown */\n  const renderBreadcrumbNode = breadcrumbItem => {\n    if (menu || overlay) {\n      const mergeDropDownProps = Object.assign({}, dropdownProps);\n      if ('overlay' in props) {\n        mergeDropDownProps.overlay = overlay;\n      }\n      return /*#__PURE__*/React.createElement(Dropdown, Object.assign({\n        menu: menu,\n        placement: \"bottom\"\n      }, mergeDropDownProps), /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-overlay-link`\n      }, breadcrumbItem, /*#__PURE__*/React.createElement(DownOutlined, null)));\n    }\n    return breadcrumbItem;\n  };\n  let link;\n  if ('href' in restProps) {\n    link = /*#__PURE__*/React.createElement(\"a\", Object.assign({\n      className: `${prefixCls}-link`\n    }, restProps), children);\n  } else {\n    link = /*#__PURE__*/React.createElement(\"span\", Object.assign({\n      className: `${prefixCls}-link`\n    }, restProps), children);\n  }\n  // wrap to dropDown\n  link = renderBreadcrumbNode(link);\n  if (children !== undefined && children !== null) {\n    return /*#__PURE__*/React.createElement(\"li\", null, link, separator && /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-separator`\n    }, separator));\n  }\n  return null;\n};\nBreadcrumbItem.__ANT_BREADCRUMB_ITEM = true;\nexport default BreadcrumbItem;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}