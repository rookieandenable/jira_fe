{"ast":null,"code":"import { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { resetComponent, resetIcon, textEllipsis } from '../../style';\nconst genTransferCustomizeStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    listHeight,\n    controlHeightLG,\n    marginXXS,\n    margin\n  } = token;\n  const tableCls = `${antCls}-table`;\n  const inputCls = `${antCls}-input`;\n  return {\n    [`${componentCls}-customize-list`]: {\n      [`${componentCls}-list`]: {\n        flex: '1 1 50%',\n        width: 'auto',\n        height: 'auto',\n        minHeight: listHeight\n      },\n      // =================== Hook Components ===================\n      [`${tableCls}-wrapper`]: {\n        [`${tableCls}-small`]: {\n          border: 0,\n          borderRadius: 0,\n          [`${tableCls}-selection-column`]: {\n            width: controlHeightLG,\n            minWidth: controlHeightLG\n          }\n        },\n        [`${tableCls}-pagination${tableCls}-pagination`]: {\n          margin: `${margin}px 0 ${marginXXS}px`\n        }\n      },\n      [`${inputCls}[disabled]`]: {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n};\nconst genTransferStatusColor = (token, color) => {\n  const {\n    componentCls,\n    colorBorder\n  } = token;\n  return {\n    [`${componentCls}-list`]: {\n      borderColor: color,\n      '&-search:not([disabled])': {\n        borderColor: colorBorder\n      }\n    }\n  };\n};\nconst genTransferStatusStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [`${componentCls}-status-error`]: Object.assign({}, genTransferStatusColor(token, token.colorError)),\n    [`${componentCls}-status-warning`]: Object.assign({}, genTransferStatusColor(token, token.colorWarning))\n  };\n};\nconst genTransferListStyle = token => {\n  const {\n    componentCls,\n    colorBorder,\n    colorSplit,\n    lineWidth,\n    transferItemHeight,\n    transferHeaderHeight,\n    transferHeaderVerticalPadding,\n    transferItemPaddingVertical,\n    controlItemBgActive,\n    controlItemBgActiveHover,\n    colorTextDisabled,\n    listHeight,\n    listWidth,\n    listWidthLG,\n    fontSizeIcon,\n    marginXS,\n    paddingSM,\n    lineType,\n    iconCls,\n    motionDurationSlow\n  } = token;\n  return {\n    display: 'flex',\n    flexDirection: 'column',\n    width: listWidth,\n    height: listHeight,\n    border: `${lineWidth}px ${lineType} ${colorBorder}`,\n    borderRadius: token.borderRadiusLG,\n    '&-with-pagination': {\n      width: listWidthLG,\n      height: 'auto'\n    },\n    '&-search': {\n      [`${iconCls}-search`]: {\n        color: colorTextDisabled\n      }\n    },\n    '&-header': {\n      display: 'flex',\n      flex: 'none',\n      alignItems: 'center',\n      height: transferHeaderHeight,\n      // border-top is on the transfer dom. We should minus 1px for this\n      padding: `${transferHeaderVerticalPadding - lineWidth}px ${paddingSM}px ${transferHeaderVerticalPadding}px`,\n      color: token.colorText,\n      background: token.colorBgContainer,\n      borderBottom: `${lineWidth}px ${lineType} ${colorSplit}`,\n      borderRadius: `${token.borderRadiusLG}px ${token.borderRadiusLG}px 0 0`,\n      '> *:not(:last-child)': {\n        marginInlineEnd: 4 // This is magic and fixed number, DO NOT use token since it may change.\n      },\n\n      '> *': {\n        flex: 'none'\n      },\n      '&-title': Object.assign(Object.assign({}, textEllipsis), {\n        flex: 'auto',\n        textAlign: 'end'\n      }),\n      '&-dropdown': Object.assign(Object.assign({}, resetIcon()), {\n        fontSize: fontSizeIcon,\n        transform: 'translateY(10%)',\n        cursor: 'pointer',\n        '&[disabled]': {\n          cursor: 'not-allowed'\n        }\n      })\n    },\n    '&-body': {\n      display: 'flex',\n      flex: 'auto',\n      flexDirection: 'column',\n      overflow: 'hidden',\n      fontSize: token.fontSize,\n      '&-search-wrapper': {\n        position: 'relative',\n        flex: 'none',\n        padding: paddingSM\n      }\n    },\n    '&-content': {\n      flex: 'auto',\n      margin: 0,\n      padding: 0,\n      overflow: 'auto',\n      listStyle: 'none',\n      '&-item': {\n        display: 'flex',\n        alignItems: 'center',\n        minHeight: transferItemHeight,\n        padding: `${transferItemPaddingVertical}px ${paddingSM}px`,\n        transition: `all ${motionDurationSlow}`,\n        '> *:not(:last-child)': {\n          marginInlineEnd: marginXS\n        },\n        '> *': {\n          flex: 'none'\n        },\n        '&-text': Object.assign(Object.assign({}, textEllipsis), {\n          flex: 'auto'\n        }),\n        '&-remove': {\n          position: 'relative',\n          color: colorBorder,\n          cursor: 'pointer',\n          transition: `all ${motionDurationSlow}`,\n          '&:hover': {\n            color: token.colorLinkHover\n          },\n          '&::after': {\n            position: 'absolute',\n            insert: `-${transferItemPaddingVertical}px -50%`,\n            content: '\"\"'\n          }\n        },\n        [`&:not(${componentCls}-list-content-item-disabled)`]: {\n          '&:hover': {\n            backgroundColor: token.controlItemBgHover,\n            cursor: 'pointer'\n          },\n          [`&${componentCls}-list-content-item-checked:hover`]: {\n            backgroundColor: controlItemBgActiveHover\n          }\n        },\n        '&-checked': {\n          backgroundColor: controlItemBgActive\n        },\n        '&-disabled': {\n          color: colorTextDisabled,\n          cursor: 'not-allowed'\n        }\n      },\n      // Do not change hover style when `oneWay` mode\n      [`&-show-remove ${componentCls}-list-content-item:not(${componentCls}-list-content-item-disabled):hover`]: {\n        background: 'transparent',\n        cursor: 'default'\n      }\n    },\n    '&-pagination': {\n      padding: `${token.paddingXS}px 0`,\n      textAlign: 'end',\n      borderTop: `${lineWidth}px ${lineType} ${colorSplit}`\n    },\n    '&-body-not-found': {\n      flex: 'none',\n      width: '100%',\n      margin: 'auto 0',\n      color: colorTextDisabled,\n      textAlign: 'center'\n    },\n    '&-footer': {\n      borderTop: `${lineWidth}px ${lineType} ${colorSplit}`\n    }\n  };\n};\nconst genTransferStyle = token => {\n  const {\n    antCls,\n    iconCls,\n    componentCls,\n    transferHeaderHeight,\n    marginXS,\n    marginXXS,\n    fontSizeIcon,\n    fontSize,\n    lineHeight\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'stretch',\n      [`${componentCls}-disabled`]: {\n        [`${componentCls}-list`]: {\n          background: token.colorBgContainerDisabled\n        }\n      },\n      [`${componentCls}-list`]: genTransferListStyle(token),\n      [`${componentCls}-operation`]: {\n        display: 'flex',\n        flex: 'none',\n        flexDirection: 'column',\n        alignSelf: 'center',\n        margin: `0 ${marginXS}px`,\n        verticalAlign: 'middle',\n        [`${antCls}-btn`]: {\n          display: 'block',\n          '&:first-child': {\n            marginBottom: marginXXS\n          },\n          [iconCls]: {\n            fontSize: fontSizeIcon\n          }\n        }\n      },\n      [`${antCls}-empty-image`]: {\n        maxHeight: transferHeaderHeight / 2 - Math.round(fontSize * lineHeight)\n      }\n    })\n  };\n};\nconst genTransferRTLStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [`${componentCls}-rtl`]: {\n      direction: 'rtl'\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Transfer', token => {\n  const {\n    fontSize,\n    lineHeight,\n    lineWidth,\n    controlHeightLG,\n    controlHeight\n  } = token;\n  const fontHeight = Math.round(fontSize * lineHeight);\n  const transferHeaderHeight = controlHeightLG;\n  const transferItemHeight = controlHeight;\n  const transferToken = mergeToken(token, {\n    transferItemHeight,\n    transferHeaderHeight,\n    transferHeaderVerticalPadding: Math.ceil((transferHeaderHeight - lineWidth - fontHeight) / 2),\n    transferItemPaddingVertical: (transferItemHeight - fontHeight) / 2\n  });\n  return [genTransferStyle(transferToken), genTransferCustomizeStyle(transferToken), genTransferStatusStyle(transferToken), genTransferRTLStyle(transferToken)];\n}, {\n  listWidth: 180,\n  listHeight: 200,\n  listWidthLG: 250\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}