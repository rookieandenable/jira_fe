{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport RcDrawer from 'rc-drawer';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { NoFormStyle } from '../form/context';\nimport { getTransitionName } from '../_util/motion';\nimport warning from '../_util/warning';\nimport DrawerPanel from './DrawerPanel';\n// CSSINJS\nimport useStyle from './style';\nimport { NoCompactStyle } from '../space/Compact';\nconst SizeTypes = ['default', 'large'];\nconst defaultPushState = {\n  distance: 180\n};\nfunction Drawer(props) {\n  var _a;\n  const {\n      rootClassName,\n      width,\n      height,\n      size = 'default',\n      mask = true,\n      push = defaultPushState,\n      open,\n      afterOpenChange,\n      onClose,\n      prefixCls: customizePrefixCls,\n      getContainer: customizeGetContainer,\n      // Deprecated\n      visible,\n      afterVisibleChange\n    } = props,\n    rest = __rest(props, [\"rootClassName\", \"width\", \"height\", \"size\", \"mask\", \"push\", \"open\", \"afterOpenChange\", \"onClose\", \"prefixCls\", \"getContainer\", \"visible\", \"afterVisibleChange\"]);\n  const {\n    getPopupContainer,\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('drawer', customizePrefixCls);\n  // Style\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const getContainer =\n  // 有可能为 false，所以不能直接判断\n  customizeGetContainer === undefined && getPopupContainer ? () => getPopupContainer(document.body) : customizeGetContainer;\n  const drawerClassName = classNames({\n    'no-mask': !mask,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, rootClassName, hashId);\n  // ========================== Warning ===========================\n  if (process.env.NODE_ENV !== 'production') {\n    [['visible', 'open'], ['afterVisibleChange', 'afterOpenChange']].forEach(_ref => {\n      let [deprecatedName, newName] = _ref;\n      process.env.NODE_ENV !== \"production\" ? warning(!(deprecatedName in props), 'Drawer', `\\`${deprecatedName}\\` is deprecated, please use \\`${newName}\\` instead.`) : void 0;\n    });\n    if (getContainer !== undefined && ((_a = props.style) === null || _a === void 0 ? void 0 : _a.position) === 'absolute') {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Drawer', '`style` is replaced by `rootStyle` in v5. Please check that `position: absolute` is necessary.') : void 0;\n    }\n  }\n  // ============================ Size ============================\n  const mergedWidth = React.useMemo(() => width !== null && width !== void 0 ? width : size === 'large' ? 736 : 378, [width, size]);\n  const mergedHeight = React.useMemo(() => height !== null && height !== void 0 ? height : size === 'large' ? 736 : 378, [height, size]);\n  // =========================== Motion ===========================\n  const maskMotion = {\n    motionName: getTransitionName(prefixCls, 'mask-motion'),\n    motionAppear: true,\n    motionEnter: true,\n    motionLeave: true,\n    motionDeadline: 500\n  };\n  const panelMotion = motionPlacement => ({\n    motionName: getTransitionName(prefixCls, `panel-motion-${motionPlacement}`),\n    motionAppear: true,\n    motionEnter: true,\n    motionLeave: true,\n    motionDeadline: 500\n  });\n  // =========================== Render ===========================\n  return wrapSSR( /*#__PURE__*/React.createElement(NoCompactStyle, null, /*#__PURE__*/React.createElement(NoFormStyle, {\n    status: true,\n    override: true\n  }, /*#__PURE__*/React.createElement(RcDrawer, Object.assign({\n    prefixCls: prefixCls,\n    onClose: onClose,\n    maskMotion: maskMotion,\n    motion: panelMotion\n  }, rest, {\n    open: open !== null && open !== void 0 ? open : visible,\n    mask: mask,\n    push: push,\n    width: mergedWidth,\n    height: mergedHeight,\n    rootClassName: drawerClassName,\n    getContainer: getContainer,\n    afterOpenChange: afterOpenChange !== null && afterOpenChange !== void 0 ? afterOpenChange : afterVisibleChange\n  }), /*#__PURE__*/React.createElement(DrawerPanel, Object.assign({\n    prefixCls: prefixCls\n  }, rest, {\n    onClose: onClose\n  }))))));\n}\nif (process.env.NODE_ENV !== 'production') {\n  Drawer.displayName = 'Drawer';\n}\nfunction PurePanel(_a) {\n  var {\n      prefixCls: customizePrefixCls,\n      style,\n      className,\n      placement = 'right'\n    } = _a,\n    restProps = __rest(_a, [\"prefixCls\", \"style\", \"className\", \"placement\"]);\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('drawer', customizePrefixCls);\n  // Style\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, `${prefixCls}-pure`, `${prefixCls}-${placement}`, hashId, className),\n    style: style\n  }, /*#__PURE__*/React.createElement(DrawerPanel, Object.assign({\n    prefixCls: prefixCls\n  }, restProps))));\n}\nDrawer._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}