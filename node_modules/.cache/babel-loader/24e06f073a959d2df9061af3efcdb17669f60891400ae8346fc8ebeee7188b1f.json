{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\nimport TimelineItem from './TimelineItem';\n// CSSINJS\nimport useStyle from './style';\nconst Timeline = props => {\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const {\n      prefixCls: customizePrefixCls,\n      pending = null,\n      pendingDot,\n      children,\n      className,\n      reverse = false,\n      mode = ''\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"pending\", \"pendingDot\", \"children\", \"className\", \"reverse\", \"mode\"]);\n  const prefixCls = getPrefixCls('timeline', customizePrefixCls);\n  const pendingNode = typeof pending === 'boolean' ? null : pending;\n  // Style\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const pendingItem = pending ? /*#__PURE__*/React.createElement(TimelineItem, {\n    pending: !!pending,\n    dot: pendingDot || /*#__PURE__*/React.createElement(LoadingOutlined, null)\n  }, pendingNode) : null;\n  const timeLineItems = React.Children.toArray(children);\n  timeLineItems.push(pendingItem);\n  if (reverse) {\n    timeLineItems.reverse();\n  }\n  const getPositionCls = (ele, idx) => {\n    if (mode === 'alternate') {\n      if (ele.props.position === 'right') return `${prefixCls}-item-right`;\n      if (ele.props.position === 'left') return `${prefixCls}-item-left`;\n      return idx % 2 === 0 ? `${prefixCls}-item-left` : `${prefixCls}-item-right`;\n    }\n    if (mode === 'left') return `${prefixCls}-item-left`;\n    if (mode === 'right') return `${prefixCls}-item-right`;\n    if (ele.props.position === 'right') return `${prefixCls}-item-right`;\n    return '';\n  };\n  // Remove falsy items\n  const truthyItems = timeLineItems.filter(item => !!item);\n  const itemsCount = React.Children.count(truthyItems);\n  const lastCls = `${prefixCls}-item-last`;\n  const items = React.Children.map(truthyItems, (ele, idx) => {\n    const pendingClass = idx === itemsCount - 2 ? lastCls : '';\n    const readyClass = idx === itemsCount - 1 ? lastCls : '';\n    return cloneElement(ele, {\n      className: classNames([ele.props.className, !reverse && !!pending ? pendingClass : readyClass, getPositionCls(ele, idx)])\n    });\n  });\n  const hasLabelItem = timeLineItems.some(item => {\n    var _a;\n    return !!((_a = item === null || item === void 0 ? void 0 : item.props) === null || _a === void 0 ? void 0 : _a.label);\n  });\n  const classString = classNames(prefixCls, {\n    [`${prefixCls}-pending`]: !!pending,\n    [`${prefixCls}-reverse`]: !!reverse,\n    [`${prefixCls}-${mode}`]: !!mode && !hasLabelItem,\n    [`${prefixCls}-label`]: hasLabelItem,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"ul\", Object.assign({}, restProps, {\n    className: classNames(classString, hashId)\n  }), items));\n};\nTimeline.Item = TimelineItem;\nif (process.env.NODE_ENV !== 'production') {\n  Timeline.displayName = 'Timeline';\n}\nexport default Timeline;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}